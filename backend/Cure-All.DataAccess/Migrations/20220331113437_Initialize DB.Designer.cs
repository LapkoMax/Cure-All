// <auto-generated />
using System;
using Cure_All.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cure_All.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220331113437_Initialize DB")]
    partial class InitializeDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cure_All.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IllnessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IllnessId");

                    b.HasIndex("PatientCardId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d66e4b1-32dc-43c3-a373-ac3b6115261e"),
                            LicenseNo = "123456",
                            Speciality = "TestSpeciality",
                            UserId = "15bb0fef-2480-41ae-8b04-feedb9ee7f16",
                            WorkAddress = "TestAddress",
                            WorkStart = new DateTime(2022, 3, 31, 14, 34, 37, 423, DateTimeKind.Local).AddTicks(4481)
                        });
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72c8072f-22c9-42f2-a493-62f9a1d0f0d8"),
                            UserId = "3476e580-dc43-4425-9509-4743484780d3"
                        });
                });

            modelBuilder.Entity("Cure_All.Models.Entities.PatientCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientCards");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.PatientIllneses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("PatientCardId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientIllneses");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBurth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "73cdd0ca-72f5-4eab-97b1-5f08535814e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c67575be-5f2f-4d06-8bc1-3dfc5114ba4d",
                            DateOfBurth = new DateTime(2022, 3, 31, 14, 34, 37, 420, DateTimeKind.Local).AddTicks(5524),
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            FirsName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PasswordHash = "9CBA73C31AC15D21512382CE6B21E83F8B9FDDD31196FF4F54559A8E29ADD1E3BC4038C86C9BEE7512D0D8EA72EC9480580DC677A9F172B46366ECB5198615CC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57b13e5e-78a9-4654-a27c-5557561d1ab5",
                            TwoFactorEnabled = false,
                            UserName = "AdminTest"
                        },
                        new
                        {
                            Id = "15bb0fef-2480-41ae-8b04-feedb9ee7f16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0da49a84-5d63-42ce-9c7f-f5484365f945",
                            DateOfBurth = new DateTime(2022, 3, 31, 14, 34, 37, 421, DateTimeKind.Local).AddTicks(6953),
                            Email = "doctor@test.com",
                            EmailConfirmed = false,
                            FirsName = "Doctor",
                            LastName = "Doctor",
                            LockoutEnabled = false,
                            PasswordHash = "9CBA73C31AC15D21512382CE6B21E83F8B9FDDD31196FF4F54559A8E29ADD1E3BC4038C86C9BEE7512D0D8EA72EC9480580DC677A9F172B46366ECB5198615CC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42827c2c-4ae7-4517-baad-adb088b8c56c",
                            TwoFactorEnabled = false,
                            Type = "Doctor",
                            UserName = "DoctorTest"
                        },
                        new
                        {
                            Id = "3476e580-dc43-4425-9509-4743484780d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac31dcc8-d3c4-46af-977a-7a460af22c92",
                            DateOfBurth = new DateTime(2022, 3, 31, 14, 34, 37, 421, DateTimeKind.Local).AddTicks(7297),
                            Email = "patient@test.com",
                            EmailConfirmed = false,
                            FirsName = "Patient",
                            LastName = "Patient",
                            LockoutEnabled = false,
                            PasswordHash = "9CBA73C31AC15D21512382CE6B21E83F8B9FDDD31196FF4F54559A8E29ADD1E3BC4038C86C9BEE7512D0D8EA72EC9480580DC677A9F172B46366ECB5198615CC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58acfc0f-6288-41a7-9492-45a200b395a5",
                            TwoFactorEnabled = false,
                            Type = "Patient",
                            UserName = "PatientTest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "bd70f5f5-5ee3-4f84-92a9-2677f943a90e",
                            ConcurrencyStamp = "2f142afd-4757-4e6d-9fe5-2a2e251ef538",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4804449b-83a4-4796-8355-88f317323715",
                            ConcurrencyStamp = "284f469c-0a77-45d2-8d7e-be6b440f7ba4",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "01453c60-8d7a-4078-a9c5-94b297b7ad97",
                            ConcurrencyStamp = "24718914-7f4f-4d51-b880-722b760bcd91",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "73cdd0ca-72f5-4eab-97b1-5f08535814e5",
                            RoleId = "bd70f5f5-5ee3-4f84-92a9-2677f943a90e"
                        },
                        new
                        {
                            UserId = "15bb0fef-2480-41ae-8b04-feedb9ee7f16",
                            RoleId = "4804449b-83a4-4796-8355-88f317323715"
                        },
                        new
                        {
                            UserId = "3476e580-dc43-4425-9509-4743484780d3",
                            RoleId = "01453c60-8d7a-4078-a9c5-94b297b7ad97"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Appointment", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cure_All.Models.Entities.Illness", "Illness")
                        .WithMany()
                        .HasForeignKey("IllnessId");

                    b.HasOne("Cure_All.Models.Entities.PatientCard", "PatientCard")
                        .WithMany()
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Illness");

                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Doctor", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Illness", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.Appointment", null)
                        .WithMany("Illnesses")
                        .HasForeignKey("AppointmentId");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Patient", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.PatientCard", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.Patient", "Patient")
                        .WithOne("PatientCard")
                        .HasForeignKey("Cure_All.Models.Entities.PatientCard", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.PatientIllneses", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.Illness", "Illness")
                        .WithMany()
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cure_All.Models.Entities.PatientCard", null)
                        .WithMany("PatientIllneses")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cure_All.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Illness");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cure_All.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cure_All.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Appointment", b =>
                {
                    b.Navigation("Illnesses");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.Patient", b =>
                {
                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("Cure_All.Models.Entities.PatientCard", b =>
                {
                    b.Navigation("PatientIllneses");
                });
#pragma warning restore 612, 618
        }
    }
}
